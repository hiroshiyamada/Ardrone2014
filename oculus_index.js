// Generated by CoffeeScript 1.8.0
(function() {
  var app, bayeux, drone_ip, express, faye, network, path, server, socket, swarm;

  express = require("express");

  faye = require("faye");

  path = require("path");

  drone_ip = "192.168.1.1";

  network = [drone_ip];

  swarm = require("./swarm");

  network.forEach(function(ip) {
    return swarm.add({
      ip: ip
    });
  });

  swarm["do"](function(drone) {
    console.log('config drone:', drone.id);
    drone.config('general:navdata_demo', 'FALSE');
    return drone.on('navdata', function(data) {
      drone.navdata = data;
      return socket.publish("/drone/navdata/" + drone.id, data);
    });
  });
  
  swarm.png();

  app = express();

  app.configure(function() {
    app.set('port', process.env.PORT || 3000);
    app.use(app.router);
    app.use(express["static"](path.join(__dirname, 'public')));
    return app.use("/bower_components", express["static"](path.join(__dirname, 'bower_components')));
  });

  server = require("http").createServer(app);

  bayeux = new faye.NodeAdapter({
    mount: '/faye',
    timeout: 45
  });

  bayeux.attach(server);

  bayeux.bind("handshake", function(clientId) {
    return console.log("socket handshake!", clientId);
  });

  bayeux.bind("disconnect", function(clientId) {
    return console.log("socket disconnect!", clientId);
  });

  socket = new faye.Client("http://localhost:" + (app.get("port")) + "/faye");

  app.get("/drones", function(req, res) {
    var drones;
    drones = [];
    swarm.forEach(function(drone) {
      return drones.push({
        id: drone.id,
        ip: drone.ip,
        camera: drone.camera,
        enabled: drone.enabled
      });
    });
    console.log("new client connection (sent %s drones)", drones.length);
    return res.end(JSON.stringify(drones));
  });

  socket.subscribe("/drone/enable", function(data) {
    swarm.drones[data.id].enabled = data.status;
    return console.log('set drone %s control to %s', data.id, data.status);
  });

  socket.subscribe("/drone/camera", function(data) {
    swarm.drones[data.id].changeCamera(data.camera);
    return console.log('set drone %s camera to %s', data.id, data.camera);
  });

  socket.subscribe("/swarm/move", function(control) {
    console.log('swarm move', control);
    return swarm.move(control);
  });

  socket.subscribe("/swarm/animate", function(animation) {
    console.log('swarm animate: ', animation);
    return swarm.animate(animation);
  });

  socket.subscribe("/swarm/action", function(command) {
    console.log('swarm action: ', command);
    return swarm.action(command);
  });

  server.listen(app.get("port"), function() {
    return console.log("Express server listening on port " + app.get("port"));
  });

  app.get("/drone/camera/:id/:random", function(req, res) {
    res.header("Cache-Control", "no-cache, no-store");
    res.header("Content-Type", "image/png");
    return res.end(swarm.drones[req.params.id].pngBuffer, "binary");
  });

  require("dronestream").listen(server, {
    ip: drone_ip,
    path: '/dronestream101',
    timeout: 500
  });

}).call(this);
